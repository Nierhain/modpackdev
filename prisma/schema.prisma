// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  // Do not use foreign keys (PlanetScale does not support them)
  relationMode = "prisma"
}


// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  User
  Moderator
  Admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(User)
  accounts      Account[]
  sessions      Session[]
  Recipe        Recipe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id     String @id @default(cuid())
  userId String
  outputId String
  

  ingredients Ingredient[]
  output Output @relation(fields: [outputId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([outputId])
}

model Item {
  id           String       @id @default(cuid())
  modId        String
  resourceName String

  Mod Mod @relation(fields: [modId], references:[id], onDelete: Cascade)
  Ingredient   Ingredient[]
  Outputs      Output[]

  @@index([modId])
}

model Ingredient {
  id String @id @default(cuid())

  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  recipes Recipe[]
  @@index([itemId])
}

model Output {
  id String @id @default(cuid())
    
  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  recipes Recipe[]
  @@index([itemId])
}

model Entity {
  id String @id @default(cuid())
  modId String 
  resourceName String
  image String?
  version String
  displayName String
  type EntityType @default(Mob)

  mod Mod  @relation(fields: [modId], references:[id], onDelete: Cascade)
  @@index([modId])
}

model Mod {
  id String @id @default(cuid())
  namespace String
  version String

  Entities Entity[]
  Items Item[]
}

enum EntityType {
  Mob
  Player
  Item
  Other
}